this was the original code
scala> val l = List(1,2,3,2,4,3,1,5)
l: List[Int] = List(1, 2, 3, 2, 4, 3, 1, 5)

scala> val li = l.zipWithIndex
li: List[(Int, Int)] = List((1,0), (2,1), (3,2), (2,3), (4,4), (3,5), (1,6), (5,7))

scala> def getMove(item:(Int, Int), pricesWithIdx:List[(Int, Int)]):Int = {
     |    val (price, index) = item
     |    if (index > 0) {
     |      val (prevPrice, prevIdx) = pricesWithIdx(index-1)
     |      if (price > prevPrice) 1 else 0
     |    } else 0
     | }
getMove: (item: (Int, Int), pricesWithIdx: List[(Int, Int)])Int

scala> val mapped = li.map(item => (item._1, item._2, getMove(item, li))
     | )
mapped: List[(Int, Int, Int)] = List((1,0,0), (2,1,1), (3,2,1), (2,3,0), (4,4,1), (3,5,0), (1,6,0), (5,7,1))

Otto Chrons @ochrons 11:27
you could use l.sliding(2) to get consecutive pairs of values and go from there

Martijn Hoekstra @martijnhoekstra 11:27
or use scanLeft to keep track of a state
something like
! List(1,2,3,2,4,3,1,5).scanLeft((0,0)){ case ((prev, prevmov), next) => (next, next - prev)}

multibot1 @multibot1 11:28
List[(Int, Int)] = List((0,0), (1,1), (2,1), (3,1), (2,-1), (4,2), (3,-1), (1,-2), (5,4))

Martijn Hoekstra @martijnhoekstra 11:30
at any point you want to iterate in some way over a list, indexing usually seems appealing at first, but really just makes it more complex (see all the validation in your getMove method)

mmistroni @mmistroni 11:31
many tx for all the suggestions!

Martijn Hoekstra @martijnhoekstra 11:32
usually, you only want to index when there is a non-trivial index transformation that you can't neatly capture in a traversal
for example, when you have to do matrix transformations
(I suspect most of those, maybe even all of those can still be expressed as traversal given a suitable representation, but translating an algorithm that is fundamentally index-based to a datastructure and algorithm that is traversal-based can be very hard)

Otto Chrons @ochrons 11:41
and don't use List when you need indexing :wink:

reactormonk @reactormonk 11:41
I've got a situation where if I summon two implicits via implicitly beforehand (and don't assign them to anything), the compilation works. But If I leave them out, the compliation fails.
How do I debug something like that?

mmistroni @mmistroni 11:42
@ochrons uhm... use Seq instead?

Otto Chrons @ochrons 11:43
no, Seq is just an alias to List when creating a new, use something that's more performant for random access like Vector

Leif Battermann @battermann 11:46
! val l = List(1,2,3,2,4,3,1,5); l.zip(l.drop(1)).map{ case (a,b) => (s"$a -> $b" ,a < b) }

multibot1 @multibot1 11:46
l: List[Int] = List(1, 2, 3, 2, 4, 3, 1, 5)
List[(String, Boolean)] = List((1 -> 2,true), (2 -> 3,true), (3 -> 2,false), (2 -> 4,true), (4 -> 3,false), (3 -> 1,false), (1 -> 5,true))

Leif Battermann @battermann 11:49
sry, I had to try the @multibot1 (my premiere :wink:)
_
 
